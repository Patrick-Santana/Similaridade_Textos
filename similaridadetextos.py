# -*- coding: utf-8 -*-
"""SimilaridadeTextos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10q85bmKFmRlw3N-eQZuvK_cwoZBTm4M4

```
# Medida de Similaridade entre Textos
```



*   Neste Notebook, utilizaremos a função contaiment, Responsável por comparar dois textos e analisar a similaridade dos mesmos, com a relação aos seus n-gramas de interação.

```
# Contar N-Grama
```



*   palavras, Letras
*   Simbolos, Classificação gramatical e etc
"""

import numpy as np
import sklearn

"""> Unigrama"""

from sklearn.feature_extraction.text import CountVectorizer

texto_comparado = "Um dia um adeus eu indo embora, com tanta loucura em meio a aventura"

texto_fonte = " Eu indo embora, Quanta loucura,Por tão pouca aventura,Agora entendo"

# Númeero de n_gramas
n = 1

#Instancia o contador de N-gramas
counts = CountVectorizer(analyzer='word', ngram_range=(n,n))

# Criando um dicionario de n-gramas
vocab2int = counts.fit([texto_comparado, texto_fonte]).vocabulary_

print(vocab2int)

"""> Bigrama"""

n = 2

counts = CountVectorizer(analyzer='word', ngram_range=(n,n))

vocab2int = counts.fit([texto_comparado, texto_fonte]).vocabulary_

print(vocab2int)

"""> Trigrama"""

n = 3


counts = CountVectorizer(analyzer='word', ngram_range=(n,n))

vocab2int = counts.fit([texto_comparado, texto_fonte]).vocabulary_

print(vocab2int)

"""> Array de n-gramas

*   Vamos utilizar o CountVectorizer para criar um array com as contagens de n-gramas
"""

#N-gramas

n = 1

#Instancia o contador de n-gramas
counts = CountVectorizer(analyzer='word', ngram_range=(n,n))

#Criar uma matriz de contagem de n=grama para dois textos
n_grams = counts.fit_transform([texto_comparado, texto_fonte])

#Criando um dicionário de n-gramas
vocab2int = counts.fit([texto_comparado, texto_fonte]).vocabulary_

n_grams_array = n_grams.toarray()

print('Vetor de n-gramas:\n\n', n_grams_array)

print()

print('Dicionario d en-gramas (unigrama):\n\n', vocab2int)

n_grams

n_grams.toarray()

intersection_list = np.amin(n_grams.toarray(), axis=0)

intersection_list

intersection_count = np.sum(intersection_list)
intersection_count

index_A = 0

A_count = np.sum(n_grams.toarray()[index_A])
A_count

intersection_count/A_count

"""> Criando uma função que recebe um array-de-gramas"""

def containment(n_grams_array):
  #Calcula o contaiment entre dois textos
  #Nomaliza a interseção dos contadores de n-gramas

  #Cria uma lista que contém o valor minimo encontrado nas colunas 
  #0 se não houver correspondências e 1+ para as palavras correspondentes

  intersection_list = np.amin(n_grams_array, axis= 0)

  #Soma numero de interseção

  intersection_count = np.sum(intersection_list)

  #Conta número de n-gramas no texto 1

  A_idx = 0
  A_count = np.sum(n_grams_array[A_idx])

  #Normaliza e calcula valor final

  containment_val = intersection_count/ A_count

  return containment_val

containment_val = containment(n_grams.toarray())

print('Containment: ', containment_val)

"""> Para Bigrama"""

#para n = n

counts_2grams = CountVectorizer(analyzer='word', ngram_range=(2,2))

bigram_counts = counts_2grams.fit_transform([texto_comparado,texto_fonte])

#Calcula Containment

containment_val = containment(bigram_counts.toarray())

print('Containment for n=2: ', containment_val)

